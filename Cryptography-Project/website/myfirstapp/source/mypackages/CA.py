# Import Charm-Crypto
from charm.toolbox.pairinggroup import PairingGroup, GT
from charm.schemes.abenc.ac17 import AC17CPABE
from pymongo import MongoClient
from .CPABE import CPABE
import json

class CentralizedAuthority:
    def __init__(self):
        self.connection_string = 'mongodb+srv://lanphuongnt:keandk27@cluster0.hfwbqyp.mongodb.net/'
        self.client = MongoClient(self.connection_string)
        self.cpabe = CPABE("AC17")

    '''
        Setup is called when admin adds a new user.
        User ID = sha256(Username || Random(32)), in Database: UserID is primary key. To get userID, we need username and password
        Json {'uid' : userID, 'publickey' : public_key, 'masterkey' : masterkey} will be stored on Cloud (MongoDB) and only CA can acess this database
        Users can view their uid and public key
    '''

    def Setup(self, userID):
        (public_key, master_key) = self.cpabe.ac17.setup()
        db = self.client['CA']
        collection = db['key']
        new_key = json.dumps({'userID' : str(userID) , 'public_key' : public_key, 'master_key' : master_key})
        collection.insert_one(new_key)
        return 

    def GetSubjectAttribute(self, userID): # 
        # Load public key 
        attribute = {}
        return attribute

    def GeneratePrivateKey(self, request, userID, attribute):
        # Load master_key MongoDB
        # Example
        # Get attribute in session

        self.client()

        master_key = {'g': [8621788314304491395021192991771699836330429589690797992249694169356540884788237105845407373602142378502274355740512729065113456063447939860744460592126589, 1520608531726113874256031369425194112794269819540478652993050356733319406990006819133321840267052379883283371968660825833000889958878004077391219026416557], 'h': [1497771697072249793264586542054642401610996498369975835746042913984704689298003029649612773682124624073215990690635243876745904373676375754690759150614991, 2924134953940611750831985149061696221599869578920426827374806050205131121739186814084285821027215140097276299751331081780965059726598499270336873855792178], 'g_k': [[4954945444279628564062181311209293632006069876289913228223613131506139241348607862325328493148172197464299465262119744001297021783638737965696983975290647, 4608193232182001792903753426447594367883536319609628314192373548436136373306520857915986158657376282152394243000569680836422268705961249995603286501659858], [3854608270629595164167959525845350148014099268738208903656621277667312502949272752317818070904058603013151645424473935255546178697664801204227776400287862, 5788584303120989545229268107994130895514406645527742263995817411846043354420658001803266456951509762491380524458055120840635722962567832813373861312661260], [7207227914015589298421930148025676072516620914033283175940493997222915764426435366344633104330132081462461150304114530672693094784035026545221553239973542, 2713787826864285300717698445281638911819439897880637679128036633080927723870079536072940712578508415846968314965319653730018392837481154849165441385498390]], 'A': [224756765853185474157419924402230588159784854302, 97420620461128409789739133032758859030861777592], 'B': [684687256332761186940975891321916316925552185416, 123008862420891883614440888093568215577160811404]}
    
    def AddPolicy(self, request): # Call by admin
        
        return 
    