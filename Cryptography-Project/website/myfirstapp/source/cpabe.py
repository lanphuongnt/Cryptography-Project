# Import Charm-Crypto
from charm.toolbox.pairinggroup import PairingGroup, GT
from charm.schemes.abenc.ac17 import AC17CPABE

import json

def encrypttest(): 
    pairing_group = PairingGroup('SS512')

    cpabe = AC17CPABE(pairing_group, 2)

    (pubkey, masterkey) = cpabe.setup()

    # attibute = {'role' : 'DOCTOR', 'major' : 'STOMATCH'}
    attibute = ['DOCTOR', 'STOMATCH']
    key = cpabe.keygen(pubkey, masterkey, attibute)
    print("public key", pubkey)
    print("masterkey", masterkey)
    msg = pairing_group.random(GT)
    print("msg type :" , str(msg))
    print(f"Key: {key}")
    # msg = b"lmao"
    policy = "((DOCTOR or PATIENT) and STOMATCH)"
    ctxt = cpabe.encrypt(pubkey, msg, policy)
    print("type", type(ctxt))
    rec = cpabe.decrypt(pubkey, ctxt, key)
    if rec:
        print(rec)
    # print("public key", pubkey)
    # print("key", key)
    # print("msg", msg)
    
encrypttest()

'''
* Public key was generated by CA (using cpabe.setup())
* Message from user's request
* Policy from Policy Repository (from database or CA)
'''

# def Encrypt(public_key, message, policy): 
#     cpabe = CPABE("AC17")
#     random_message = cpabe.groubObj.random(GT)
#     ciphertext = cpabe.ac17.encrypt(public_key, random_message, policy)
#     print(ciphertext)


# pk = {'h_A': [[8098869404008460396426580258321254535947688669694772901153660495744428776661395047790395890081775843701445057156078045363691176135774301487802942848463514, 5575502221883567377809455701038528316799825931045675964010742358020272956861380519851529116544181544446126503505149123853308952892417698953603049300518942], [4820490456370670859070411271790038897154418364012687245346902222146031269843578233398359833788017021632137216727245504539068622680841020031528260229429211, 3785922440050112697344967995615350186538923395075826704491468200623183514512835158201091844564774872278263942021483318620470350448024532202348504678498622], [421492120659043182020256177181730894940083060205543728747629743185429964461981155055257897027576567463034665114505267604041458804786392626103334689548602, 8589844991224939000446521398494556966897381209485884327551455780917426714331783251405969275663777343549515555463200982623503232635515498598092106440524408]], 'e_gh_kA': [[3177981526941821423723140919985569325637976080788771716681293185082497319776547020489077068791069175879937512315187282154780688939153253440808211773405749, 600280959510851877972173747865397751381301629919086778372735886985716806526113272872558581721566891835984943771289002305577395811160398686502853696753665], [487052738341583766274323099494217909085317414434070138255562182305820503777911807567523221316009777039131052760094846427201685874221537840928733877141525, 6505810229824194537882752619294468403018867289264712002442917513162016639910990399255778802318843727916085977962569835040711527083873218950428816379044410]]}

# mk = {'g': [2757292582483944045992996370491636252260370545080125914615043879131867081767954682407199845118372943669454686354403821871304972688415084392211099018490672, 3903100690007989162744181611709697733556217938939762455162182571533181573229090115349376567234712458656623100897436019337227145456783100181440265781666844], 'h': [8512607634243513820823875233084266273212222491041549138620096693833106417172729844134607636586165568867044498565352965870878183077314050212548968239771167, 7240676424798887845047990578994209300679461174300014220766976844792933523010586165683636614180929968498225927279242198705242556152224793497383519228070220], 'g_k': [[8362895906445492863433453269350831206383212789344043901226193870125818551123542234190696207064438913393740007219234153737440625621309314155613577921774572, 7471741484024521222076883356966527523165697543655393439528861504239716119254320912401663555350773567332005562142111285214529645342427667678792177080789652], [968135200819287418251858200371656068277078574252496023092403136937757858912408251364180870486593689551799832865686682950120030785391950265883348892477335, 5694501086797955022501968141898106503374482089973439641264945823695842417177490208075041928913820062744693954952181670767992854776302758885422689700581684], [4705981209926028992227991610001340956414787450772889705746319969969135019509449877572509865947754395807925796635523302994452054019760939938709743715193687, 6301546309990511275390841748867737270984422376065945717172868810601499746874738405273357685506622283217893170282475927702409826129575013314783205655297221]], 'A': [4391859819619179871748580482914560840202226214, 726959308563239277124777824911613645456025532969], 'B': [401818282232568490871909926780400448306477390177, 147143419180261877347300469534741313031716146800]}

